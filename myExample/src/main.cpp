//hello-world https://habr.com/ru/companies/edison/articles/495614/
//Bundle FFmpeg with Qt6 application using CMake https://forum.qt.io/topic/141950/bundle-ffmpeg-with-qt6-application-using-cmake
#include <QCoreApplication>
#include <QtLogging>
#include "ffmpegInclude.h"

static void encode(AVCodecContext *enc_ctx, AVFrame *frame, AVPacket *pkt,
                   FILE *outfile)
{
    int ret;

    /* send the frame to the encoder */
    if (frame)
        qDebug() << "Send frame" << frame->pts;

    ret = avcodec_send_frame(enc_ctx, frame);
    if (ret < 0) {
        qDebug("Error sending a frame for encoding\n");
        exit(1);
    }

    while (ret >= 0) {
        ret = avcodec_receive_packet(enc_ctx, pkt);
//        WelsLog (& (pEncCtx->sLogCtx), WELS_LOG_WARNING, "[Rc] iDid = %d,iContinualSkipFrames(%d) is large",
//                iCurDid, pWelsSvcRc->iContinualSkipFrames);
        if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)
            return;
        else if (ret < 0) {
            qDebug("Error during encoding\n");
            exit(1);
        }

        qDebug() << "Write packet" << pkt->pts << "(size=%5d)" << pkt->size;
        fwrite(pkt->data, 1, pkt->size, outfile);
        av_packet_unref(pkt);
    }
}

const char *filename, *codec_name;
const char *file_out_name;
const AVCodec *codec;
AVCodecContext *c= NULL;
int i, ret, x, y;
FILE *fin;
FILE *f_out;
AVFrame *frame;
AVPacket *pkt;
uint8_t endcode[] = { 0, 0, 1, 0xb7 };

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    //    if (argc <= 2) {
    //        fprintf(stderr, "Usage: %s <output file> <codec name>\n", argv[0]);
    //        exit(0);
    //    }
    filename = "../2.3D printing video_2023.08.23.yuvj422p"; //argv[1];
    file_out_name = "out4_.mkv";
    codec_name = "libopenh264"; //argv[2];

    /* find the mpeg1video encoder */
    codec = avcodec_find_encoder_by_name(codec_name);
    if (!codec) {
        fprintf(stderr, "Codec '%s' not found\n", codec_name);
        exit(1);
    }

    c = avcodec_alloc_context3(codec);
    if (!c) {
        fprintf(stderr, "Could not allocate video codec context\n");
        exit(1);
    }

//    AVFormatContext *input_format_context = NULL, *output_format_context = NULL;
//    if ((ret = avformat_open_input(&input_format_context, filename, NULL, NULL)) < 0) {
//        fprintf(stderr, "Could not open input file '%s'", filename);
//        exit(1);
//    }
//    if ((ret = avformat_find_stream_info(input_format_context, NULL)) < 0) {
//        fprintf(stderr, "Failed to retrieve input stream information");
//        exit(1);
//    }

    pkt = av_packet_alloc();
    if (!pkt)
        exit(1);

    /* put sample parameters */
    c->bit_rate = 4000000;
    c->rc_max_rate = 7500000;
    /* resolution must be a multiple of two */
    //encoder_ext.cpp: int32_t iMinCrFrameSize = (pParam->iVideoWidth * pParam->iVideoHeight * 3) >> 2; //MinCr = 2;
    c->width = 1920*2;
    c->height = 1080*2;
    /* frames per second */
    c->time_base = (AVRational){1, 1000};
    c->framerate = (AVRational){25, 1};

    /* emit one intra frame every ten frames
     * check frame pict_type before passing frame
     * to encoder, if frame->pict_type is AV_PICTURE_TYPE_I
     * then gop_size is ignored and the output of encoder
     * will always be I frame irrespective to gop_size
     */
    c->gop_size = 10;

    /// P-frames, generated by referencing data from prev and future frames.
    /// [Compression up, CPU usage up]
    /// [use 3/gop]
    c->max_b_frames = 3;
    /// Can be used by a P-frame(predictive, partial frame) to help define a future frame in a compressed video.
    /// [use 3â€“5 ref per P]
    c->refs = 3;
    c->pix_fmt = AV_PIX_FMT_YUV420P;

    if (codec->id == AV_CODEC_ID_H264){
        //For libopenh264 only
        av_opt_set(c->priv_data, "profile", "high", 0);
        av_opt_set(c->priv_data, "allow_skip_frames", "1", 0);
    }
    /* open it */
    ret = avcodec_open2(c, codec, NULL);
    if (ret < 0) {
        fprintf(stderr, "Could not open codec: %s\n", "av_err2str(ret)"); //DungeonLords
        exit(1);
    }

    fin = fopen(filename, "r");
    if (!fin) {
        fprintf(stderr, "Could not open %s\n", filename);
        exit(1);
    }

    f_out = fopen(file_out_name, "wb");
    if(!f_out) {
        fprintf(stderr, "Could not open f_out %s\n", filename);
        exit(1);
    }

    frame = av_frame_alloc();
    if (!frame) {
        fprintf(stderr, "Could not allocate video frame\n");
        exit(1);
    }
    frame->format = c->pix_fmt;
    frame->width  = c->width;
    frame->height = c->height;
    quint32 size   = frame->width * frame->height;
    ret = av_frame_get_buffer(frame, 0);
    if (ret < 0) {
        fprintf(stderr, "Could not allocate the video frame data\n");
        exit(1);
    }

    /* encode 1 second of video */
    for (i = 0; i < 1000; i++) {
        fflush(stdout);

        /* Make sure the frame data is writable.
           On the first round, the frame is fresh from av_frame_get_buffer()
           and therefore we know it is writable.
           But on the next rounds, encode() will have called
           avcodec_send_frame(), and the codec may have kept a reference to
           the frame in its internal structures, that makes the frame
           unwritable.
           av_frame_make_writable() checks that and allocates a new buffer
           for the frame only if necessary.
         */
        ret = av_frame_make_writable(frame);
        if (ret < 0)
            exit(1);

        /* Prepare a dummy image.
           In real code, this is where you would have your own logic for
           filling the frame. FFmpeg does not care what you put in the
           frame.
         */
        size_t err;
        if((err = fread((uint8_t*)(frame->data[0]), size, 1, fin)) <= 0)
            break;

        /* encode the image */
        encode(c, frame, pkt, f_out);
    }

    /* flush the encoder */
    encode(c, NULL, pkt, f_out);
    fclose(fin);
    fclose(f_out);

    avcodec_free_context(&c);
    av_frame_free(&frame);
    av_packet_free(&pkt);
    qDebug("goodboy");

    QMetaObject::invokeMethod(&a, "quit", Qt::QueuedConnection);
    ret= QCoreApplication::exec();
    return ret;
}
